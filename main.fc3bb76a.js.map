{"version":3,"sources":["scripts/main.js"],"names":["rows","columns","feild","score","gameField","document","querySelector","gameScore","button","winMessage","loseMessage","startMessage","start","classList","add","replace","innerText","addRandomValue","hasSpace","value","Math","random","r","floor","c","updateCells","includes","cell","cells","className","isWin","updateScore","isLost","remove","some","arr","hasChangedField","currentField","copyField","move","row","rowWithoutZeros","filter","el","i","isFinite","length","push","moveUp","moveRight","reverse","moveDown","moveLeft","addEventListener","e","map","slice","preventDefault","code"],"mappings":"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","file":"main.fc3bb76a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst rows = 4;\nconst columns = 4;\nlet feild = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\nlet score = 0;\n\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\n\nbutton.addEventListener('click', start);\n\nfunction start() {\n  feild = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n  startMessage.classList.add('hidden');\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n\n  addRandomValue();\n  addRandomValue();\n}\n\nfunction addRandomValue() {\n  const value = Math.random() < 0.9 ? 2 : 4;\n\n  while (hasSpace()) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (feild[r][c] === 0) {\n      feild[r][c] = value;\n      break;\n    }\n  }\n\n  updateCells();\n}\n\nfunction hasSpace() {\n  for (let r = 0; r < rows; r++) {\n    if (feild[r].includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateCells() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = gameField.rows[r].cells[c];\n      const value = feild[r][c];\n\n      cell.innerText = '';\n      cell.className = 'field-cell';\n\n      if (value > 0) {\n        cell.innerText = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n    }\n  }\n\n  isWin();\n  updateScore();\n\n  if (isLost()) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction isWin() {\n  if (feild.some(arr => arr.some(cell => cell === 2048))) {\n    winMessage.classList.remove('hidden');\n  }\n\n  return false;\n}\n\nfunction updateScore() {\n  gameScore.innerText = score;\n}\n\nfunction isLost() {\n  if (hasSpace()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (feild[r][c] === feild[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (feild[r][c] === feild[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction hasChangedField(currentField, copyField) {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (currentField[r][c] !== copyField[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction move(row) {\n  let rowWithoutZeros = row.filter(el => el !== 0);\n\n  for (let i = 0; i < rows - 1; i++) {\n    if (rowWithoutZeros[i] === rowWithoutZeros[i + 1]\n      && isFinite(rowWithoutZeros[i])) {\n      rowWithoutZeros[i] *= 2;\n      rowWithoutZeros[i + 1] = 0;\n      score += rowWithoutZeros[i];\n    }\n  }\n\n  rowWithoutZeros = rowWithoutZeros.filter(el => el !== 0);\n\n  while (rowWithoutZeros.length < rows) {\n    rowWithoutZeros.push(0);\n  }\n\n  return rowWithoutZeros;\n}\n\nfunction moveUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [feild[0][c], feild[1][c],\n      feild[2][c], feild[3][c]];\n\n    row = move(row);\n\n    for (let r = 0; r < rows; r++) {\n      feild[r][c] = row[r];\n    }\n  }\n}\n\nfunction moveRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = feild[r];\n\n    row = row.reverse();\n\n    row = move(row);\n\n    row = row.reverse();\n\n    feild[r] = row;\n  }\n}\n\nfunction moveDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [feild[0][c], feild[1][c],\n      feild[2][c], feild[3][c]];\n\n    row = row.reverse();\n\n    row = move(row);\n\n    row = row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      feild[r][c] = row[r];\n    }\n  }\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = feild[r];\n\n    row = move(row);\n\n    feild[r] = row;\n  }\n}\n\ndocument.addEventListener('keyup', e => {\n  const copyField = feild.map(arr => arr.slice());\n\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n  }\n\n  if (hasChangedField(feild, copyField)) {\n    addRandomValue();\n  }\n\n  updateCells();\n});\n"]}